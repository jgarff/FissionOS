#
# SConscript
#
# 
# Copyright (c) 2013-2017 Western Digital Corporation or its affiliates.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. The name of the copyright holder nor the names of its contributors may not
#    be used to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Author: Jeremy Garff <jeremy.garff@sandisk.com>
#


Import('targets')

saml_sources = Split('''
    saml_watchdog.c
    saml_clocks.c
    saml_port.c
    saml_tc.c
    saml_sercom_usart.c
    saml_nvm.c
    saml_reset.c
    saml_i2c.c
    saml_usb.c
''')

samd53_sources = Split('''
    saml_clocks.c
    saml_sercom_usart.c
    saml_usb.c
    saml_nvm.c
    saml_tc.c
    saml_tcc.c
    saml_adc.c
    saml_port.c
    saml_gmac.c
''')

samd20_sources = Split('''
    saml_watchdog.c
    saml_clocks.c
    saml_port.c
    saml_tc.c
    saml_sercom_usart.c
    saml_reset.c
    saml_i2c.c
    saml_nvm.c
''')

samd21_sources = Split('''
    saml_clocks.c
    saml_sercom_usart.c
    saml_sercom_spi.c
    saml_usb.c
    saml_nvm.c
    saml_tc.c
    saml_tcc.c
    saml_adc.c
    saml_port.c
''')

platforms = [
    [ 'at91saml21', saml_sources ],
    [ 'atsamd20', samd20_sources ],
    [ 'atsamd21', samd21_sources ],
    [ 'atsamd53', samd53_sources ],
]


for key in targets:
    for platform, sources in platforms:
        if platform == key:
            lenv = targets[key]['ENV']
            lib = lenv.StaticLibrary('saml_' + key, sources)
            targets[key]['LIBS'].append(lib)
            targets[key]['ENV'].MergeFlags({ 'CPPPATH' : [ Dir('.').abspath ] })

Export('targets')


